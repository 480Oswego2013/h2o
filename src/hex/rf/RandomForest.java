package hex.rf;
import hex.rf.Tree.StatType;

import java.util.Random;

import test.RFDriver;
import water.DRemoteTask;
import water.Timer;

/**
 * A RandomForest can be used for growing or validation. The former starts with a known target number of trees,
 * the latter is incrementally populated with trees as they are built.
 * Validation and error reporting is not supported when growing a forest.
 */
public class RandomForest {

  /* Seed initializer generated by:  cat /dev/urandom| tr -dc '0-9a-f' | fold -w 16| head -n 1' */
  private static final long ROOT_SEED_ADD  = 0x026244fd935c5111L;
  private static final long TREE_SEED_INIT = 0x1321e74a0192470cL;

  public RandomForest(final DRF drf,
                      final Data data,
                      int ntrees, int maxTreeDepth, double minErrorRate,
                      StatType stat, boolean parallelTrees,
                      int numSplitFeatures, int[] ignoreColumns) {
    // Build <ntrees> trees via the Random Forest algorithm.
    Timer  t_alltrees = new Timer();
    Tree[] trees      = new Tree[ntrees];

    Utils.pln("[RF] starting RF computation with "+data.rows()+" rows and " + data.badRows() + " bad rows.");

    Random rnd = Utils.getRNG(data.seed() + ROOT_SEED_ADD);
    for (int i = 0; i < ntrees; ++i) {
      long treeSeed = rnd.nextLong() + TREE_SEED_INIT; // make sure that enough bits is initialized
      trees[i] = new Tree( data, maxTreeDepth, minErrorRate, stat, numSplitFeatures, treeSeed,
                           drf._modelKey,i,drf._ntrees, drf._sample, drf._numrows,
                           ignoreColumns, drf._useStratifySampling, drf._strata,
                           drf._verbose, drf._exclusiveSplitLimit );
      if (!parallelTrees)   DRemoteTask.invokeAll(new Tree[]{trees[i]});
    }
    if(parallelTrees)DRemoteTask.invokeAll(trees);

    Utils.pln("All trees ("+ntrees+") done in "+ t_alltrees);
  }

  // The method is here to ensure temporal compatibility with benchmarking tools.
  @Deprecated
  public static void main(String[] args) throws Exception {
    RFDriver.main(args);
  }
}
